<?php

/*
 * This file is part of the Incipio package.
 *
 * (c) Florian Lefevre
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Repository\Project;

use App\Entity\Hr\Competence;
use App\Entity\Project\Cc;
use App\Entity\Project\Etude;
use App\Entity\Project\Phase;
use Doctrine\ORM\EntityRepository;

/**
 * EtudeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudeRepository extends EntityRepository
{
    /**
     * Création d'une méthode précise au lieu d'utiliser findOneByNom pour permettre l'ajout ultérieur de jointure.
     *
     * @param $nom
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByNom($nom)
    {
        $qb = $this->_em->createQueryBuilder();
        $query = $qb->select('e')
            ->from(Etude::class, 'e')
            ->where('e.nom = :nom')
            ->setParameter('nom', $nom);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function getEtudesCa()
    {
        $qb = $this->_em->createQueryBuilder();

        $query = $qb->select('e')
            ->from(Cc::class, 'cc')
            ->leftJoin('cc.etude', 'e');
        //->addSelect('e')
        //->where('e.cc IS NOT NULL')
        //->addOrderBy('cc.dateSignature');

        return $query->getQuery()->getResult();
    }

    public function findByCompetence(Competence $competence)
    {
        $qb = $this->_em->createQueryBuilder();

        $query = $qb->select('e')
            ->from(Etude::class, 'e')
            ->leftJoin('e.competences', 'c')
            ->addSelect('c')
            ->leftJoin('e.phases', 'p')->addSelect('p')//cette requete n'est utilisée que sur la page RH
            // du bundle N7Consulting. Comme elle affiche le nombre de JEH, ajout d'une jointure sur les phases pour
            // éviter de faire une requete sur les phases a chaque étude.
            ->leftJoin('e.cc', 'cc')->addSelect('cc')
            ->leftJoin('e.ap', 'ap')->addSelect('ap')
            ->where(':competence MEMBER OF e.competences')
            ->setParameter('competence', $competence)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Requete spéciale pour afficher le pipeline des études.
     * A permis de réduire le nombre de requetes de 109 à 34.
     * Il est possible de réduire encore plus le nombre de requetes, mais la page se met alors
     * à diverger en temps, car les requetes sont de plus en plus longues.
     *
     * @param array      $etat   pour récuperer les études selon leurs etats d'avancement
     * @param array|null $orders tableau des champs sur lesquels ordonner les études
     *
     * @return array
     */
    public function getPipeline(array $etat, array $orders = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from(Etude::class, 'e')
            ->where('e.stateID = :stateId')
            ->setParameter('stateId', $etat[key($etat)]);

        if (null !== $orders) {
            foreach ($orders as $column => $value) {
                $qb->orderBy('e.' . $column, $value);
            }
        }
        //les jointures
        $qb
            ->leftJoin('e.avs', 'avs')
            ->addSelect('avs')
            ->leftJoin('e.ap', 'ap')
            ->addSelect('ap')
            ->leftJoin('e.cc', 'cc')
            ->addSelect('cc')
            ->leftJoin('e.clientContacts', 'clientContacts')
            ->addSelect('clientContacts')//on laisse le champ faitPar d'un contact client en asynchrone, car ça ne devrait pas trop diverger, et que ça rajoute beaucoup d'informations dans la requete pour pas grand chose en termes de fonctionnalités.
            ->leftJoin('e.prospect', 'prospect')
            ->addSelect('prospect')
            ->leftJoin('e.phases', 'phases')
            ->addSelect('phases')
//            ->leftJoin('e.procesVerbaux', 'procesVerbaux')
//            ->addSelect('procesVerbaux')
//            ->leftJoin('e.factures', 'factures')
//            ->addSelect('factures')
            ->leftJoin('e.suiveur', 'suiveur')
            ->addSelect('suiveur')
            ->leftJoin('e.suiveurQualite', 'suiveurQualite')
            ->addSelect('suiveurQualite')
            ->leftJoin('e.missions', 'missions')
            ->addSelect('missions')
            ->leftJoin('missions.repartitionsJEH', 'repartitionsJEH')
            ->addSelect('repartitionsJEH');

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Fetch negociate, accepted and current projects.
     *
     * @return array of projects ordered by state
     */
    public function findBeginningProjects()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from(Etude::class, 'e')
            ->where('e.stateID = :stateNegociate or e.stateID= :stateCurrent')
            ->setParameter('stateNegociate', Etude::ETUDE_STATE_NEGOCIATION)
            ->setParameter('stateCurrent', Etude::ETUDE_STATE_COURS)
            ->OrderBy('e.stateID');
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @param string $search a pattern we'd like to search in etudes' name
     * @param int    $limit  the number of etudes that research should return
     *
     * @return array
     */
    public function searchByNom($search, $limit = 10)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from(Etude::class, 'e')
            ->where('e.nom LIKE :nom')
            ->setParameter('nom', '%' . $search . '%')
            ->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Calculate the sum of CA for a given state (and mandat).
     *
     * @param int  $state  state of the etudes to sum
     * @param null $mandat
     *
     * @return int
     */
    public function getCaByState(int $state, $mandat = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(p.nbrJEH * p.prixJEH + e.fraisDossier) as montant')
            ->from(Phase::class, 'p')
            ->leftJoin('p.etude', 'e')
            ->where('e.stateID = :stateId')
            ->setParameter('stateId', $state);
        if ($mandat) {
            $qb->andWhere('e.mandat = :mandat')
                ->setParameter('mandat', $mandat);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
}
